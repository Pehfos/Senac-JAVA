Java:
HOMEWORK: Make a print for the alteration and exclusion methods.
static //Lets you use the class without needing to instantiate it.

--Conditionals
if //Sets the condition for something. Operator being <?>.
else if //Sets the condition for something else that already has an <if>.
else //Returns something if no conditions are met. Operator being <:>.

--Instancing
<Class> <vartype> = new <Class>() //Instantiates a private class.
	The Constructor method creates an instance with values already put in: ...<Class>(<vartype> <varname).
@override //Used to override a method from the Java object class.
	toString() //Overrides the toString() method to return a specified information when printing an object.

--Loop 
for //Loops for specified number of times. for commands require: (<vartype> <varname> ; <varname> <modifier>;<varname> <+>)
while //Loops for an unspecified number of times, evaluates something that'll result in a <true> or <false>.
	//while commands require: (<varname> == <true> or <false>)
do...while //Loops once and then checks if it should loop for an unspecified number of time.

--Array
To create an array, first begin by typing "List<vartype>" to declare the type of variables that List is receiving,
follow it with <varname> and "= new ArrayList<vartype>()" to finalize your array method.

-Array Loop
Started by typing "for(<vartype> <varname2>: <varname>) //This loop will show everything inside of <varname>.
	Example: List<String> example = new Arraylist<String>();
		...
		 for(String ex: example)
--StringBuilder
Object that can do stuff with Strings.
append // Capable o grouping strings together.

--Debug
Double click on the line left of the number to select up until where you want the debug to run.
F5 //Enters the line.
F6 //Goes to the next line.
F8 //Continues the program.

--Java Layers:
model //Represents the tables.
view // Views the projects.
controller //Controls the projects.
dao //Data Access Object, for data.
service //Manages data without letting the user do it directly.

--Setting up the server
1. In the servers tab, click on the underlined link then select the version of the server you wish to use. 
Double click on it to browse for the folder that has the server and use it, and configure it by double clicking it.
2. Make sure to set up the correct Server Location. Then right click it and go to properties.
Don't forget to switch locations in properties.
3. To link the server with the application, right click on it and choose Add and Remove then choose the project.
to start the server go to the Green Button at the right.

--Driver is the class that bridges the backend language with the Database.
	It is good to put it inside webapp, in a folder you can named as "lib", afterwards go to build path and select 
add to build path.

--PreparedStatement is an object that sends a command to SQL.
ResultSet // Returns something from the SQL.
executeQuery // Executes a query on the database that returns a table or something. (example: SELECT)
executeUpdate // Executes a query that alters the registers. (example: INSERT)

--For numbers that you won't be doing math equations to, use Strings/varchar.

Deprecated code:
	public List<Tarefa> alterar(List<Tarefa> tarefas){
		Connection cnx = Dao.getConexao();
		List<Tarefa> lista = new ArrayList<Tarefa>();
		Tarefa tarefa = null;
		
		listar();
		
		String SQL = "UPDATE tarefas SET descricao = ? WHERE id = ?";
		String SQL2 = "UPDATE tarefas SET prazo = ? WHERE id = ?";
		String SQL3 = "UPDATE tarefas SET finalizada = ? WHERE id = ?";
		
		PreparedStatement ps;
		PreparedStatement ps2;
		PreparedStatement ps3;

		System.out.println("Digite o Id da tarefa que deseja alterar: ");
		
		Scanner scanner = new Scanner(System.in);
		int input = scanner.nextInt();
		
		
		
			
		if(input == 1){
			try {
				ps = cnx.prepareStatement(SQL);
				ps.setString(1, tarefa.getDescricao());
				ps.setInt(2, tarefa.getId());
				
				ps2 = cnx.prepareStatement(SQL2);
				ps2.setInt(1, tarefa.getPrazo());
				ps2.setInt(2, tarefa.getId());
				
				ps3 = cnx.prepareStatement(SQL3);
				ps3.setBoolean(1, tarefa.getFinalizada());
				ps3.setInt(2, tarefa.getId());
				
				int X = ps.executeUpdate();
				int Y = ps2.executeUpdate();
				int Z = ps3.executeUpdate();
				
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
###############################################################################################################################
Git commands:

--To create a repository, first right click on your local folder and open GIT BASH, then:
git init //USED ONLY TO START A REPOSITORY.
git add . //Used to add changes.
git commit -m "Comment" //Used to confirm changes.
git remote add origin https://github.com/Pehfos/"siteUrlHere".git //Used to add the remote repository.
git branch -M main //Changes the name of the branch.
git push -u origin main //Pushes your changes into the remote repository, subsequent uses only require <git push>.

//Separate commands:
git status //Checks the status of your repository.

.gitignore //Is a .txt file created inside of your repository, it is used to exclude things 
	you wish to push into your repository.
	//Java example for .gitignore: https://gist.github.com/dedunumax/54e82214715e35439227

###############################################################################################################################

Database MySQL:
 ANSI SQL is the basic SQL language
--SQL commands are usually written in ALL CAPS.

DDL (Data Definition Language)
--CREATE DATABASE name //To create a database.
--ALTER TABLE //Adds or modifies a table.
--DROP TABLE //Deletes a table.
--RENAME
--DELETE //Deletes a column from a table, MUST BE USED WITH WHERE on the PRIMARY KEY.
--MODIFY //Modifies a column into a different data type.
--TRUNCATE TABLE //Deletes the information from a table without deleting it.

CHAR/VARCHAR(number range) //Same thing as <Strings>.
DATE //Sets the date.
DATETIME //Sets the date and the time.
INT //Whole numbers.
DECIMAL(p,s) //p meaning the max numbers that can be written, usually 18. 
	s meaning the numbers that can be writter after the ,
	//Same thing as <double>/<float>.
PRIMARY KEY //Selects an attribute to be unique, preferably of the <INT> data type.
AUTO_INCREMENT //Adds +1 to the DB register automatically, usually of a <PRIMARY KEY>.
NOT NULL //Mandatory field.
DEFAULT //Returns default information if the field is not filled.

USE <databaseName> //Command to use a specific database.
SELECT //Chooses a table to view things in. The character * means all attributes in there.
WHERE //Limits a specific condition after another command. Can be given a wider range with <OR>, <AND> and <LIKE>.
FROM //Specifies the name of the table.
INSERT INTO //Inserts attributes into a table. <VARCHAR> values must be written inside ' '.
VALUES //Used after <INSERT INTO> to put the values you want inside that table corresponding to their attributes.
SET //Sets the information of a column to something else.
UPDATE //Used together with SET and WHERE to change the information from a column.
